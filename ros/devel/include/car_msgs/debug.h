// Generated by gencpp from file car_msgs/debug.msg
// DO NOT EDIT!


#ifndef CAR_MSGS_MESSAGE_DEBUG_H
#define CAR_MSGS_MESSAGE_DEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <car_msgs/lon_debug.h>
#include <car_msgs/lat_debug.h>
#include <car_msgs/mpc_debug.h>

namespace car_msgs
{
template <class ContainerAllocator>
struct debug_
{
  typedef debug_<ContainerAllocator> Type;

  debug_()
    : header()
    , ts(0.0)
    , lon_debug_msg()
    , lat_debug_msg()
    , mpc_debug_msg()  {
    }
  debug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ts(0.0)
    , lon_debug_msg(_alloc)
    , lat_debug_msg(_alloc)
    , mpc_debug_msg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _ts_type;
  _ts_type ts;

   typedef  ::car_msgs::lon_debug_<ContainerAllocator>  _lon_debug_msg_type;
  _lon_debug_msg_type lon_debug_msg;

   typedef  ::car_msgs::lat_debug_<ContainerAllocator>  _lat_debug_msg_type;
  _lat_debug_msg_type lat_debug_msg;

   typedef  ::car_msgs::mpc_debug_<ContainerAllocator>  _mpc_debug_msg_type;
  _mpc_debug_msg_type mpc_debug_msg;





  typedef boost::shared_ptr< ::car_msgs::debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_msgs::debug_<ContainerAllocator> const> ConstPtr;

}; // struct debug_

typedef ::car_msgs::debug_<std::allocator<void> > debug;

typedef boost::shared_ptr< ::car_msgs::debug > debugPtr;
typedef boost::shared_ptr< ::car_msgs::debug const> debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_msgs::debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_msgs::debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace car_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'car_msgs': ['/home/wf/my-code/auto-car/ros/src/car_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::debug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::debug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_msgs::debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a486330156a1499098fce50f1c4ae2b4";
  }

  static const char* value(const ::car_msgs::debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa486330156a14990ULL;
  static const uint64_t static_value2 = 0x98fce50f1c4ae2b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_msgs::debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_msgs/debug";
  }

  static const char* value(const ::car_msgs::debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_msgs::debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 ts\n\
lon_debug lon_debug_msg\n\
lat_debug lat_debug_msg\n\
mpc_debug mpc_debug_msg\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: car_msgs/lon_debug\n\
Header header\n\
\n\
float64 station_reference\n\
float64 station_error\n\
float64 station_error_limited\n\
float64 preview_station_error\n\
float64 station_out\n\
\n\
float64 speed_reference\n\
float64 speed_error\n\
float64 speed_controller_input_limited\n\
float64 preview_speed_reference\n\
float64 preview_speed_error\n\
float64 speed_out\n\
\n\
float64 preview_acceleration_reference\n\
float64 acceleration_cmd_closeloop\n\
float64 acceleration_cmd\n\
float64 acceleration_lookup\n\
float64 speed_lookup\n\
float64 calibration_value\n\
float64 throttle_cmd\n\
float64 brake_cmd\n\
bool is_full_stop\n\
float64 slope_offset_compensation\n\
float64 current_station\n\
float64 path_remain\n\
\n\
\n\
================================================================================\n\
MSG: car_msgs/lat_debug\n\
Header header\n\
\n\
float64 lateral_error\n\
float64 ref_heading\n\
float64 heading\n\
float64 heading_error\n\
float64 heading_error_rate\n\
float64 lateral_error_rate\n\
float64 curvature\n\
float64 steer_angle\n\
float64 steer_angle_feedforward\n\
float64 steer_angle_lateral_contribution\n\
float64 steer_angle_lateral_rate_contribution\n\
float64 steer_angle_heading_contribution\n\
float64 steer_angle_heading_rate_contribution\n\
float64 steer_angle_feedback\n\
float64 steering_position\n\
float64 ref_speed\n\
float64 steer_angle_limited\n\
================================================================================\n\
MSG: car_msgs/mpc_debug\n\
Header header\n\
\n\
float64 lateral_error\n\
float64 ref_heading\n\
float64 heading\n\
float64 heading_error\n\
float64 heading_error_rate\n\
float64 lateral_error_rate\n\
float64 curvature\n\
float64 steer_angle\n\
float64 steer_angle_feedforward\n\
float64 steer_angle_lateral_contribution\n\
float64 steer_angle_lateral_rate_contribution\n\
float64 steer_angle_heading_contribution\n\
float64 steer_angle_heading_rate_contribution\n\
float64 steer_angle_feedback\n\
float64 steering_position\n\
float64 ref_speed\n\
float64 steer_angle_limited\n\
float64 station_reference\n\
float64 station_error\n\
float64 speed_reference\n\
float64 speed_error\n\
float64 acceleration_reference\n\
bool is_full_stop\n\
float64 station_feedback\n\
float64 speed_feedback\n\
float64 acceleration_cmd_closeloop\n\
float64 acceleration_cmd\n\
float64 acceleration_lookup\n\
float64 speed_lookup\n\
float64 calibration_value\n\
float64 matrix_q_updated1     # matrix_q_updated_ size 6 repeated\n\
float64 matrix_q_updated2     # matrix_q_updated_ size 6 repeated\n\
float64 matrix_q_updated3     # matrix_q_updated_ size 6 repeated\n\
float64 matrix_q_updated4     # matrix_q_updated_ size 6 repeated\n\
float64 matrix_q_updated5     # matrix_q_updated_ size 6 repeated\n\
float64 matrix_q_updated6     # matrix_q_updated_ size 6 repeated\n\
float64 matrix_r_updated1     # matrix_r_updated_ size 2  repeated\n\
float64 matrix_r_updated2     # matrix_r_updated_ size 2  repeated\n\
";
  }

  static const char* value(const ::car_msgs::debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_msgs::debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ts);
      stream.next(m.lon_debug_msg);
      stream.next(m.lat_debug_msg);
      stream.next(m.mpc_debug_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_msgs::debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_msgs::debug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ts: ";
    Printer<double>::stream(s, indent + "  ", v.ts);
    s << indent << "lon_debug_msg: ";
    s << std::endl;
    Printer< ::car_msgs::lon_debug_<ContainerAllocator> >::stream(s, indent + "  ", v.lon_debug_msg);
    s << indent << "lat_debug_msg: ";
    s << std::endl;
    Printer< ::car_msgs::lat_debug_<ContainerAllocator> >::stream(s, indent + "  ", v.lat_debug_msg);
    s << indent << "mpc_debug_msg: ";
    s << std::endl;
    Printer< ::car_msgs::mpc_debug_<ContainerAllocator> >::stream(s, indent + "  ", v.mpc_debug_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MSGS_MESSAGE_DEBUG_H
