// Generated by gencpp from file car_msgs/lon_debug.msg
// DO NOT EDIT!


#ifndef CAR_MSGS_MESSAGE_LON_DEBUG_H
#define CAR_MSGS_MESSAGE_LON_DEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace car_msgs
{
template <class ContainerAllocator>
struct lon_debug_
{
  typedef lon_debug_<ContainerAllocator> Type;

  lon_debug_()
    : header()
    , station_reference(0.0)
    , station_error(0.0)
    , station_error_limited(0.0)
    , preview_station_error(0.0)
    , station_out(0.0)
    , speed_reference(0.0)
    , speed_error(0.0)
    , speed_controller_input_limited(0.0)
    , preview_speed_reference(0.0)
    , preview_speed_error(0.0)
    , speed_out(0.0)
    , preview_acceleration_reference(0.0)
    , acceleration_cmd_closeloop(0.0)
    , acceleration_cmd(0.0)
    , acceleration_lookup(0.0)
    , speed_lookup(0.0)
    , calibration_value(0.0)
    , throttle_cmd(0.0)
    , brake_cmd(0.0)
    , is_full_stop(false)
    , slope_offset_compensation(0.0)
    , current_station(0.0)
    , path_remain(0.0)  {
    }
  lon_debug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , station_reference(0.0)
    , station_error(0.0)
    , station_error_limited(0.0)
    , preview_station_error(0.0)
    , station_out(0.0)
    , speed_reference(0.0)
    , speed_error(0.0)
    , speed_controller_input_limited(0.0)
    , preview_speed_reference(0.0)
    , preview_speed_error(0.0)
    , speed_out(0.0)
    , preview_acceleration_reference(0.0)
    , acceleration_cmd_closeloop(0.0)
    , acceleration_cmd(0.0)
    , acceleration_lookup(0.0)
    , speed_lookup(0.0)
    , calibration_value(0.0)
    , throttle_cmd(0.0)
    , brake_cmd(0.0)
    , is_full_stop(false)
    , slope_offset_compensation(0.0)
    , current_station(0.0)
    , path_remain(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _station_reference_type;
  _station_reference_type station_reference;

   typedef double _station_error_type;
  _station_error_type station_error;

   typedef double _station_error_limited_type;
  _station_error_limited_type station_error_limited;

   typedef double _preview_station_error_type;
  _preview_station_error_type preview_station_error;

   typedef double _station_out_type;
  _station_out_type station_out;

   typedef double _speed_reference_type;
  _speed_reference_type speed_reference;

   typedef double _speed_error_type;
  _speed_error_type speed_error;

   typedef double _speed_controller_input_limited_type;
  _speed_controller_input_limited_type speed_controller_input_limited;

   typedef double _preview_speed_reference_type;
  _preview_speed_reference_type preview_speed_reference;

   typedef double _preview_speed_error_type;
  _preview_speed_error_type preview_speed_error;

   typedef double _speed_out_type;
  _speed_out_type speed_out;

   typedef double _preview_acceleration_reference_type;
  _preview_acceleration_reference_type preview_acceleration_reference;

   typedef double _acceleration_cmd_closeloop_type;
  _acceleration_cmd_closeloop_type acceleration_cmd_closeloop;

   typedef double _acceleration_cmd_type;
  _acceleration_cmd_type acceleration_cmd;

   typedef double _acceleration_lookup_type;
  _acceleration_lookup_type acceleration_lookup;

   typedef double _speed_lookup_type;
  _speed_lookup_type speed_lookup;

   typedef double _calibration_value_type;
  _calibration_value_type calibration_value;

   typedef double _throttle_cmd_type;
  _throttle_cmd_type throttle_cmd;

   typedef double _brake_cmd_type;
  _brake_cmd_type brake_cmd;

   typedef uint8_t _is_full_stop_type;
  _is_full_stop_type is_full_stop;

   typedef double _slope_offset_compensation_type;
  _slope_offset_compensation_type slope_offset_compensation;

   typedef double _current_station_type;
  _current_station_type current_station;

   typedef double _path_remain_type;
  _path_remain_type path_remain;





  typedef boost::shared_ptr< ::car_msgs::lon_debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_msgs::lon_debug_<ContainerAllocator> const> ConstPtr;

}; // struct lon_debug_

typedef ::car_msgs::lon_debug_<std::allocator<void> > lon_debug;

typedef boost::shared_ptr< ::car_msgs::lon_debug > lon_debugPtr;
typedef boost::shared_ptr< ::car_msgs::lon_debug const> lon_debugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_msgs::lon_debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_msgs::lon_debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace car_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'car_msgs': ['/home/wf/my-code/auto-car/ros/src/car_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::lon_debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::lon_debug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::lon_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::lon_debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::lon_debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::lon_debug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_msgs::lon_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "323d2f9871df4f44858dc872121f8cf2";
  }

  static const char* value(const ::car_msgs::lon_debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x323d2f9871df4f44ULL;
  static const uint64_t static_value2 = 0x858dc872121f8cf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_msgs::lon_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_msgs/lon_debug";
  }

  static const char* value(const ::car_msgs::lon_debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_msgs::lon_debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float64 station_reference\n\
float64 station_error\n\
float64 station_error_limited\n\
float64 preview_station_error\n\
float64 station_out\n\
\n\
float64 speed_reference\n\
float64 speed_error\n\
float64 speed_controller_input_limited\n\
float64 preview_speed_reference\n\
float64 preview_speed_error\n\
float64 speed_out\n\
\n\
float64 preview_acceleration_reference\n\
float64 acceleration_cmd_closeloop\n\
float64 acceleration_cmd\n\
float64 acceleration_lookup\n\
float64 speed_lookup\n\
float64 calibration_value\n\
float64 throttle_cmd\n\
float64 brake_cmd\n\
bool is_full_stop\n\
float64 slope_offset_compensation\n\
float64 current_station\n\
float64 path_remain\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::car_msgs::lon_debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_msgs::lon_debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.station_reference);
      stream.next(m.station_error);
      stream.next(m.station_error_limited);
      stream.next(m.preview_station_error);
      stream.next(m.station_out);
      stream.next(m.speed_reference);
      stream.next(m.speed_error);
      stream.next(m.speed_controller_input_limited);
      stream.next(m.preview_speed_reference);
      stream.next(m.preview_speed_error);
      stream.next(m.speed_out);
      stream.next(m.preview_acceleration_reference);
      stream.next(m.acceleration_cmd_closeloop);
      stream.next(m.acceleration_cmd);
      stream.next(m.acceleration_lookup);
      stream.next(m.speed_lookup);
      stream.next(m.calibration_value);
      stream.next(m.throttle_cmd);
      stream.next(m.brake_cmd);
      stream.next(m.is_full_stop);
      stream.next(m.slope_offset_compensation);
      stream.next(m.current_station);
      stream.next(m.path_remain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lon_debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_msgs::lon_debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_msgs::lon_debug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "station_reference: ";
    Printer<double>::stream(s, indent + "  ", v.station_reference);
    s << indent << "station_error: ";
    Printer<double>::stream(s, indent + "  ", v.station_error);
    s << indent << "station_error_limited: ";
    Printer<double>::stream(s, indent + "  ", v.station_error_limited);
    s << indent << "preview_station_error: ";
    Printer<double>::stream(s, indent + "  ", v.preview_station_error);
    s << indent << "station_out: ";
    Printer<double>::stream(s, indent + "  ", v.station_out);
    s << indent << "speed_reference: ";
    Printer<double>::stream(s, indent + "  ", v.speed_reference);
    s << indent << "speed_error: ";
    Printer<double>::stream(s, indent + "  ", v.speed_error);
    s << indent << "speed_controller_input_limited: ";
    Printer<double>::stream(s, indent + "  ", v.speed_controller_input_limited);
    s << indent << "preview_speed_reference: ";
    Printer<double>::stream(s, indent + "  ", v.preview_speed_reference);
    s << indent << "preview_speed_error: ";
    Printer<double>::stream(s, indent + "  ", v.preview_speed_error);
    s << indent << "speed_out: ";
    Printer<double>::stream(s, indent + "  ", v.speed_out);
    s << indent << "preview_acceleration_reference: ";
    Printer<double>::stream(s, indent + "  ", v.preview_acceleration_reference);
    s << indent << "acceleration_cmd_closeloop: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_cmd_closeloop);
    s << indent << "acceleration_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_cmd);
    s << indent << "acceleration_lookup: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_lookup);
    s << indent << "speed_lookup: ";
    Printer<double>::stream(s, indent + "  ", v.speed_lookup);
    s << indent << "calibration_value: ";
    Printer<double>::stream(s, indent + "  ", v.calibration_value);
    s << indent << "throttle_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_cmd);
    s << indent << "brake_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.brake_cmd);
    s << indent << "is_full_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_full_stop);
    s << indent << "slope_offset_compensation: ";
    Printer<double>::stream(s, indent + "  ", v.slope_offset_compensation);
    s << indent << "current_station: ";
    Printer<double>::stream(s, indent + "  ", v.current_station);
    s << indent << "path_remain: ";
    Printer<double>::stream(s, indent + "  ", v.path_remain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MSGS_MESSAGE_LON_DEBUG_H
