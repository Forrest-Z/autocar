// Generated by gencpp from file car_msgs/trajectory.msg
// DO NOT EDIT!


#ifndef CAR_MSGS_MESSAGE_TRAJECTORY_H
#define CAR_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <car_msgs/trajectory_point.h>

namespace car_msgs
{
template <class ContainerAllocator>
struct trajectory_
{
  typedef trajectory_<ContainerAllocator> Type;

  trajectory_()
    : header()
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_path()
    , absolute_time(0.0)  {
    }
  trajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_path(_alloc)
    , absolute_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _total_path_length_type;
  _total_path_length_type total_path_length;

   typedef double _total_path_time_type;
  _total_path_time_type total_path_time;

   typedef std::vector< ::car_msgs::trajectory_point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::car_msgs::trajectory_point_<ContainerAllocator> >::other >  _trajectory_path_type;
  _trajectory_path_type trajectory_path;

   typedef double _absolute_time_type;
  _absolute_time_type absolute_time;





  typedef boost::shared_ptr< ::car_msgs::trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_msgs::trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct trajectory_

typedef ::car_msgs::trajectory_<std::allocator<void> > trajectory;

typedef boost::shared_ptr< ::car_msgs::trajectory > trajectoryPtr;
typedef boost::shared_ptr< ::car_msgs::trajectory const> trajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_msgs::trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_msgs::trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace car_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'car_msgs': ['/home/wf/my-code/auto-car/ros/src/car_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_msgs::trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_msgs::trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_msgs::trajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61de575059f17e8f9e68b40fc86fc888";
  }

  static const char* value(const ::car_msgs::trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61de575059f17e8fULL;
  static const uint64_t static_value2 = 0x9e68b40fc86fc888ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_msgs/trajectory";
  }

  static const char* value(const ::car_msgs::trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_msgs::trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
\n\
float64 total_path_length\n\
float64 total_path_time\n\
\n\
trajectory_point[] trajectory_path\n\
\n\
float64 absolute_time\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: car_msgs/trajectory_point\n\
Header header\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 theta\n\
float64 kappa\n\
float64 s\n\
\n\
float64 speed\n\
float64 accel\n\
\n\
float64 relative_time\n\
";
  }

  static const char* value(const ::car_msgs::trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_msgs::trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.total_path_length);
      stream.next(m.total_path_time);
      stream.next(m.trajectory_path);
      stream.next(m.absolute_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_msgs::trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_msgs::trajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "total_path_length: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_length);
    s << indent << "total_path_time: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_time);
    s << indent << "trajectory_path[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_path.size(); ++i)
    {
      s << indent << "  trajectory_path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::car_msgs::trajectory_point_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_path[i]);
    }
    s << indent << "absolute_time: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MSGS_MESSAGE_TRAJECTORY_H
