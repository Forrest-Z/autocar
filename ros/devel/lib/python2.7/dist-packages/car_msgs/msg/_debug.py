# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from car_msgs/debug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import car_msgs.msg
import std_msgs.msg

class debug(genpy.Message):
  _md5sum = "a486330156a1499098fce50f1c4ae2b4"
  _type = "car_msgs/debug"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 ts
lon_debug lon_debug_msg
lat_debug lat_debug_msg
mpc_debug mpc_debug_msg
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: car_msgs/lon_debug
Header header

float64 station_reference
float64 station_error
float64 station_error_limited
float64 preview_station_error
float64 station_out

float64 speed_reference
float64 speed_error
float64 speed_controller_input_limited
float64 preview_speed_reference
float64 preview_speed_error
float64 speed_out

float64 preview_acceleration_reference
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64 throttle_cmd
float64 brake_cmd
bool is_full_stop
float64 slope_offset_compensation
float64 current_station
float64 path_remain


================================================================================
MSG: car_msgs/lat_debug
Header header

float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited
================================================================================
MSG: car_msgs/mpc_debug
Header header

float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited
float64 station_reference
float64 station_error
float64 speed_reference
float64 speed_error
float64 acceleration_reference
bool is_full_stop
float64 station_feedback
float64 speed_feedback
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64 matrix_q_updated1     # matrix_q_updated_ size 6 repeated
float64 matrix_q_updated2     # matrix_q_updated_ size 6 repeated
float64 matrix_q_updated3     # matrix_q_updated_ size 6 repeated
float64 matrix_q_updated4     # matrix_q_updated_ size 6 repeated
float64 matrix_q_updated5     # matrix_q_updated_ size 6 repeated
float64 matrix_q_updated6     # matrix_q_updated_ size 6 repeated
float64 matrix_r_updated1     # matrix_r_updated_ size 2  repeated
float64 matrix_r_updated2     # matrix_r_updated_ size 2  repeated"""
  __slots__ = ['header','ts','lon_debug_msg','lat_debug_msg','mpc_debug_msg']
  _slot_types = ['std_msgs/Header','float64','car_msgs/lon_debug','car_msgs/lat_debug','car_msgs/mpc_debug']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ts,lon_debug_msg,lat_debug_msg,mpc_debug_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(debug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ts is None:
        self.ts = 0.
      if self.lon_debug_msg is None:
        self.lon_debug_msg = car_msgs.msg.lon_debug()
      if self.lat_debug_msg is None:
        self.lat_debug_msg = car_msgs.msg.lat_debug()
      if self.mpc_debug_msg is None:
        self.mpc_debug_msg = car_msgs.msg.mpc_debug()
    else:
      self.header = std_msgs.msg.Header()
      self.ts = 0.
      self.lon_debug_msg = car_msgs.msg.lon_debug()
      self.lat_debug_msg = car_msgs.msg.lat_debug()
      self.mpc_debug_msg = car_msgs.msg.mpc_debug()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.ts, _x.lon_debug_msg.header.seq, _x.lon_debug_msg.header.stamp.secs, _x.lon_debug_msg.header.stamp.nsecs))
      _x = self.lon_debug_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_19dB3d3I().pack(_x.lon_debug_msg.station_reference, _x.lon_debug_msg.station_error, _x.lon_debug_msg.station_error_limited, _x.lon_debug_msg.preview_station_error, _x.lon_debug_msg.station_out, _x.lon_debug_msg.speed_reference, _x.lon_debug_msg.speed_error, _x.lon_debug_msg.speed_controller_input_limited, _x.lon_debug_msg.preview_speed_reference, _x.lon_debug_msg.preview_speed_error, _x.lon_debug_msg.speed_out, _x.lon_debug_msg.preview_acceleration_reference, _x.lon_debug_msg.acceleration_cmd_closeloop, _x.lon_debug_msg.acceleration_cmd, _x.lon_debug_msg.acceleration_lookup, _x.lon_debug_msg.speed_lookup, _x.lon_debug_msg.calibration_value, _x.lon_debug_msg.throttle_cmd, _x.lon_debug_msg.brake_cmd, _x.lon_debug_msg.is_full_stop, _x.lon_debug_msg.slope_offset_compensation, _x.lon_debug_msg.current_station, _x.lon_debug_msg.path_remain, _x.lat_debug_msg.header.seq, _x.lat_debug_msg.header.stamp.secs, _x.lat_debug_msg.header.stamp.nsecs))
      _x = self.lat_debug_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_17d3I().pack(_x.lat_debug_msg.lateral_error, _x.lat_debug_msg.ref_heading, _x.lat_debug_msg.heading, _x.lat_debug_msg.heading_error, _x.lat_debug_msg.heading_error_rate, _x.lat_debug_msg.lateral_error_rate, _x.lat_debug_msg.curvature, _x.lat_debug_msg.steer_angle, _x.lat_debug_msg.steer_angle_feedforward, _x.lat_debug_msg.steer_angle_lateral_contribution, _x.lat_debug_msg.steer_angle_lateral_rate_contribution, _x.lat_debug_msg.steer_angle_heading_contribution, _x.lat_debug_msg.steer_angle_heading_rate_contribution, _x.lat_debug_msg.steer_angle_feedback, _x.lat_debug_msg.steering_position, _x.lat_debug_msg.ref_speed, _x.lat_debug_msg.steer_angle_limited, _x.mpc_debug_msg.header.seq, _x.mpc_debug_msg.header.stamp.secs, _x.mpc_debug_msg.header.stamp.nsecs))
      _x = self.mpc_debug_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_22dB15d().pack(_x.mpc_debug_msg.lateral_error, _x.mpc_debug_msg.ref_heading, _x.mpc_debug_msg.heading, _x.mpc_debug_msg.heading_error, _x.mpc_debug_msg.heading_error_rate, _x.mpc_debug_msg.lateral_error_rate, _x.mpc_debug_msg.curvature, _x.mpc_debug_msg.steer_angle, _x.mpc_debug_msg.steer_angle_feedforward, _x.mpc_debug_msg.steer_angle_lateral_contribution, _x.mpc_debug_msg.steer_angle_lateral_rate_contribution, _x.mpc_debug_msg.steer_angle_heading_contribution, _x.mpc_debug_msg.steer_angle_heading_rate_contribution, _x.mpc_debug_msg.steer_angle_feedback, _x.mpc_debug_msg.steering_position, _x.mpc_debug_msg.ref_speed, _x.mpc_debug_msg.steer_angle_limited, _x.mpc_debug_msg.station_reference, _x.mpc_debug_msg.station_error, _x.mpc_debug_msg.speed_reference, _x.mpc_debug_msg.speed_error, _x.mpc_debug_msg.acceleration_reference, _x.mpc_debug_msg.is_full_stop, _x.mpc_debug_msg.station_feedback, _x.mpc_debug_msg.speed_feedback, _x.mpc_debug_msg.acceleration_cmd_closeloop, _x.mpc_debug_msg.acceleration_cmd, _x.mpc_debug_msg.acceleration_lookup, _x.mpc_debug_msg.speed_lookup, _x.mpc_debug_msg.calibration_value, _x.mpc_debug_msg.matrix_q_updated1, _x.mpc_debug_msg.matrix_q_updated2, _x.mpc_debug_msg.matrix_q_updated3, _x.mpc_debug_msg.matrix_q_updated4, _x.mpc_debug_msg.matrix_q_updated5, _x.mpc_debug_msg.matrix_q_updated6, _x.mpc_debug_msg.matrix_r_updated1, _x.mpc_debug_msg.matrix_r_updated2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lon_debug_msg is None:
        self.lon_debug_msg = car_msgs.msg.lon_debug()
      if self.lat_debug_msg is None:
        self.lat_debug_msg = car_msgs.msg.lat_debug()
      if self.mpc_debug_msg is None:
        self.mpc_debug_msg = car_msgs.msg.mpc_debug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.ts, _x.lon_debug_msg.header.seq, _x.lon_debug_msg.header.stamp.secs, _x.lon_debug_msg.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_debug_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.lon_debug_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 189
      (_x.lon_debug_msg.station_reference, _x.lon_debug_msg.station_error, _x.lon_debug_msg.station_error_limited, _x.lon_debug_msg.preview_station_error, _x.lon_debug_msg.station_out, _x.lon_debug_msg.speed_reference, _x.lon_debug_msg.speed_error, _x.lon_debug_msg.speed_controller_input_limited, _x.lon_debug_msg.preview_speed_reference, _x.lon_debug_msg.preview_speed_error, _x.lon_debug_msg.speed_out, _x.lon_debug_msg.preview_acceleration_reference, _x.lon_debug_msg.acceleration_cmd_closeloop, _x.lon_debug_msg.acceleration_cmd, _x.lon_debug_msg.acceleration_lookup, _x.lon_debug_msg.speed_lookup, _x.lon_debug_msg.calibration_value, _x.lon_debug_msg.throttle_cmd, _x.lon_debug_msg.brake_cmd, _x.lon_debug_msg.is_full_stop, _x.lon_debug_msg.slope_offset_compensation, _x.lon_debug_msg.current_station, _x.lon_debug_msg.path_remain, _x.lat_debug_msg.header.seq, _x.lat_debug_msg.header.stamp.secs, _x.lat_debug_msg.header.stamp.nsecs,) = _get_struct_19dB3d3I().unpack(str[start:end])
      self.lon_debug_msg.is_full_stop = bool(self.lon_debug_msg.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_debug_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.lat_debug_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.lat_debug_msg.lateral_error, _x.lat_debug_msg.ref_heading, _x.lat_debug_msg.heading, _x.lat_debug_msg.heading_error, _x.lat_debug_msg.heading_error_rate, _x.lat_debug_msg.lateral_error_rate, _x.lat_debug_msg.curvature, _x.lat_debug_msg.steer_angle, _x.lat_debug_msg.steer_angle_feedforward, _x.lat_debug_msg.steer_angle_lateral_contribution, _x.lat_debug_msg.steer_angle_lateral_rate_contribution, _x.lat_debug_msg.steer_angle_heading_contribution, _x.lat_debug_msg.steer_angle_heading_rate_contribution, _x.lat_debug_msg.steer_angle_feedback, _x.lat_debug_msg.steering_position, _x.lat_debug_msg.ref_speed, _x.lat_debug_msg.steer_angle_limited, _x.mpc_debug_msg.header.seq, _x.mpc_debug_msg.header.stamp.secs, _x.mpc_debug_msg.header.stamp.nsecs,) = _get_struct_17d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mpc_debug_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mpc_debug_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 297
      (_x.mpc_debug_msg.lateral_error, _x.mpc_debug_msg.ref_heading, _x.mpc_debug_msg.heading, _x.mpc_debug_msg.heading_error, _x.mpc_debug_msg.heading_error_rate, _x.mpc_debug_msg.lateral_error_rate, _x.mpc_debug_msg.curvature, _x.mpc_debug_msg.steer_angle, _x.mpc_debug_msg.steer_angle_feedforward, _x.mpc_debug_msg.steer_angle_lateral_contribution, _x.mpc_debug_msg.steer_angle_lateral_rate_contribution, _x.mpc_debug_msg.steer_angle_heading_contribution, _x.mpc_debug_msg.steer_angle_heading_rate_contribution, _x.mpc_debug_msg.steer_angle_feedback, _x.mpc_debug_msg.steering_position, _x.mpc_debug_msg.ref_speed, _x.mpc_debug_msg.steer_angle_limited, _x.mpc_debug_msg.station_reference, _x.mpc_debug_msg.station_error, _x.mpc_debug_msg.speed_reference, _x.mpc_debug_msg.speed_error, _x.mpc_debug_msg.acceleration_reference, _x.mpc_debug_msg.is_full_stop, _x.mpc_debug_msg.station_feedback, _x.mpc_debug_msg.speed_feedback, _x.mpc_debug_msg.acceleration_cmd_closeloop, _x.mpc_debug_msg.acceleration_cmd, _x.mpc_debug_msg.acceleration_lookup, _x.mpc_debug_msg.speed_lookup, _x.mpc_debug_msg.calibration_value, _x.mpc_debug_msg.matrix_q_updated1, _x.mpc_debug_msg.matrix_q_updated2, _x.mpc_debug_msg.matrix_q_updated3, _x.mpc_debug_msg.matrix_q_updated4, _x.mpc_debug_msg.matrix_q_updated5, _x.mpc_debug_msg.matrix_q_updated6, _x.mpc_debug_msg.matrix_r_updated1, _x.mpc_debug_msg.matrix_r_updated2,) = _get_struct_22dB15d().unpack(str[start:end])
      self.mpc_debug_msg.is_full_stop = bool(self.mpc_debug_msg.is_full_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.ts, _x.lon_debug_msg.header.seq, _x.lon_debug_msg.header.stamp.secs, _x.lon_debug_msg.header.stamp.nsecs))
      _x = self.lon_debug_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_19dB3d3I().pack(_x.lon_debug_msg.station_reference, _x.lon_debug_msg.station_error, _x.lon_debug_msg.station_error_limited, _x.lon_debug_msg.preview_station_error, _x.lon_debug_msg.station_out, _x.lon_debug_msg.speed_reference, _x.lon_debug_msg.speed_error, _x.lon_debug_msg.speed_controller_input_limited, _x.lon_debug_msg.preview_speed_reference, _x.lon_debug_msg.preview_speed_error, _x.lon_debug_msg.speed_out, _x.lon_debug_msg.preview_acceleration_reference, _x.lon_debug_msg.acceleration_cmd_closeloop, _x.lon_debug_msg.acceleration_cmd, _x.lon_debug_msg.acceleration_lookup, _x.lon_debug_msg.speed_lookup, _x.lon_debug_msg.calibration_value, _x.lon_debug_msg.throttle_cmd, _x.lon_debug_msg.brake_cmd, _x.lon_debug_msg.is_full_stop, _x.lon_debug_msg.slope_offset_compensation, _x.lon_debug_msg.current_station, _x.lon_debug_msg.path_remain, _x.lat_debug_msg.header.seq, _x.lat_debug_msg.header.stamp.secs, _x.lat_debug_msg.header.stamp.nsecs))
      _x = self.lat_debug_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_17d3I().pack(_x.lat_debug_msg.lateral_error, _x.lat_debug_msg.ref_heading, _x.lat_debug_msg.heading, _x.lat_debug_msg.heading_error, _x.lat_debug_msg.heading_error_rate, _x.lat_debug_msg.lateral_error_rate, _x.lat_debug_msg.curvature, _x.lat_debug_msg.steer_angle, _x.lat_debug_msg.steer_angle_feedforward, _x.lat_debug_msg.steer_angle_lateral_contribution, _x.lat_debug_msg.steer_angle_lateral_rate_contribution, _x.lat_debug_msg.steer_angle_heading_contribution, _x.lat_debug_msg.steer_angle_heading_rate_contribution, _x.lat_debug_msg.steer_angle_feedback, _x.lat_debug_msg.steering_position, _x.lat_debug_msg.ref_speed, _x.lat_debug_msg.steer_angle_limited, _x.mpc_debug_msg.header.seq, _x.mpc_debug_msg.header.stamp.secs, _x.mpc_debug_msg.header.stamp.nsecs))
      _x = self.mpc_debug_msg.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_22dB15d().pack(_x.mpc_debug_msg.lateral_error, _x.mpc_debug_msg.ref_heading, _x.mpc_debug_msg.heading, _x.mpc_debug_msg.heading_error, _x.mpc_debug_msg.heading_error_rate, _x.mpc_debug_msg.lateral_error_rate, _x.mpc_debug_msg.curvature, _x.mpc_debug_msg.steer_angle, _x.mpc_debug_msg.steer_angle_feedforward, _x.mpc_debug_msg.steer_angle_lateral_contribution, _x.mpc_debug_msg.steer_angle_lateral_rate_contribution, _x.mpc_debug_msg.steer_angle_heading_contribution, _x.mpc_debug_msg.steer_angle_heading_rate_contribution, _x.mpc_debug_msg.steer_angle_feedback, _x.mpc_debug_msg.steering_position, _x.mpc_debug_msg.ref_speed, _x.mpc_debug_msg.steer_angle_limited, _x.mpc_debug_msg.station_reference, _x.mpc_debug_msg.station_error, _x.mpc_debug_msg.speed_reference, _x.mpc_debug_msg.speed_error, _x.mpc_debug_msg.acceleration_reference, _x.mpc_debug_msg.is_full_stop, _x.mpc_debug_msg.station_feedback, _x.mpc_debug_msg.speed_feedback, _x.mpc_debug_msg.acceleration_cmd_closeloop, _x.mpc_debug_msg.acceleration_cmd, _x.mpc_debug_msg.acceleration_lookup, _x.mpc_debug_msg.speed_lookup, _x.mpc_debug_msg.calibration_value, _x.mpc_debug_msg.matrix_q_updated1, _x.mpc_debug_msg.matrix_q_updated2, _x.mpc_debug_msg.matrix_q_updated3, _x.mpc_debug_msg.matrix_q_updated4, _x.mpc_debug_msg.matrix_q_updated5, _x.mpc_debug_msg.matrix_q_updated6, _x.mpc_debug_msg.matrix_r_updated1, _x.mpc_debug_msg.matrix_r_updated2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lon_debug_msg is None:
        self.lon_debug_msg = car_msgs.msg.lon_debug()
      if self.lat_debug_msg is None:
        self.lat_debug_msg = car_msgs.msg.lat_debug()
      if self.mpc_debug_msg is None:
        self.mpc_debug_msg = car_msgs.msg.mpc_debug()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.ts, _x.lon_debug_msg.header.seq, _x.lon_debug_msg.header.stamp.secs, _x.lon_debug_msg.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_debug_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.lon_debug_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 189
      (_x.lon_debug_msg.station_reference, _x.lon_debug_msg.station_error, _x.lon_debug_msg.station_error_limited, _x.lon_debug_msg.preview_station_error, _x.lon_debug_msg.station_out, _x.lon_debug_msg.speed_reference, _x.lon_debug_msg.speed_error, _x.lon_debug_msg.speed_controller_input_limited, _x.lon_debug_msg.preview_speed_reference, _x.lon_debug_msg.preview_speed_error, _x.lon_debug_msg.speed_out, _x.lon_debug_msg.preview_acceleration_reference, _x.lon_debug_msg.acceleration_cmd_closeloop, _x.lon_debug_msg.acceleration_cmd, _x.lon_debug_msg.acceleration_lookup, _x.lon_debug_msg.speed_lookup, _x.lon_debug_msg.calibration_value, _x.lon_debug_msg.throttle_cmd, _x.lon_debug_msg.brake_cmd, _x.lon_debug_msg.is_full_stop, _x.lon_debug_msg.slope_offset_compensation, _x.lon_debug_msg.current_station, _x.lon_debug_msg.path_remain, _x.lat_debug_msg.header.seq, _x.lat_debug_msg.header.stamp.secs, _x.lat_debug_msg.header.stamp.nsecs,) = _get_struct_19dB3d3I().unpack(str[start:end])
      self.lon_debug_msg.is_full_stop = bool(self.lon_debug_msg.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_debug_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.lat_debug_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.lat_debug_msg.lateral_error, _x.lat_debug_msg.ref_heading, _x.lat_debug_msg.heading, _x.lat_debug_msg.heading_error, _x.lat_debug_msg.heading_error_rate, _x.lat_debug_msg.lateral_error_rate, _x.lat_debug_msg.curvature, _x.lat_debug_msg.steer_angle, _x.lat_debug_msg.steer_angle_feedforward, _x.lat_debug_msg.steer_angle_lateral_contribution, _x.lat_debug_msg.steer_angle_lateral_rate_contribution, _x.lat_debug_msg.steer_angle_heading_contribution, _x.lat_debug_msg.steer_angle_heading_rate_contribution, _x.lat_debug_msg.steer_angle_feedback, _x.lat_debug_msg.steering_position, _x.lat_debug_msg.ref_speed, _x.lat_debug_msg.steer_angle_limited, _x.mpc_debug_msg.header.seq, _x.mpc_debug_msg.header.stamp.secs, _x.mpc_debug_msg.header.stamp.nsecs,) = _get_struct_17d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mpc_debug_msg.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mpc_debug_msg.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 297
      (_x.mpc_debug_msg.lateral_error, _x.mpc_debug_msg.ref_heading, _x.mpc_debug_msg.heading, _x.mpc_debug_msg.heading_error, _x.mpc_debug_msg.heading_error_rate, _x.mpc_debug_msg.lateral_error_rate, _x.mpc_debug_msg.curvature, _x.mpc_debug_msg.steer_angle, _x.mpc_debug_msg.steer_angle_feedforward, _x.mpc_debug_msg.steer_angle_lateral_contribution, _x.mpc_debug_msg.steer_angle_lateral_rate_contribution, _x.mpc_debug_msg.steer_angle_heading_contribution, _x.mpc_debug_msg.steer_angle_heading_rate_contribution, _x.mpc_debug_msg.steer_angle_feedback, _x.mpc_debug_msg.steering_position, _x.mpc_debug_msg.ref_speed, _x.mpc_debug_msg.steer_angle_limited, _x.mpc_debug_msg.station_reference, _x.mpc_debug_msg.station_error, _x.mpc_debug_msg.speed_reference, _x.mpc_debug_msg.speed_error, _x.mpc_debug_msg.acceleration_reference, _x.mpc_debug_msg.is_full_stop, _x.mpc_debug_msg.station_feedback, _x.mpc_debug_msg.speed_feedback, _x.mpc_debug_msg.acceleration_cmd_closeloop, _x.mpc_debug_msg.acceleration_cmd, _x.mpc_debug_msg.acceleration_lookup, _x.mpc_debug_msg.speed_lookup, _x.mpc_debug_msg.calibration_value, _x.mpc_debug_msg.matrix_q_updated1, _x.mpc_debug_msg.matrix_q_updated2, _x.mpc_debug_msg.matrix_q_updated3, _x.mpc_debug_msg.matrix_q_updated4, _x.mpc_debug_msg.matrix_q_updated5, _x.mpc_debug_msg.matrix_q_updated6, _x.mpc_debug_msg.matrix_r_updated1, _x.mpc_debug_msg.matrix_r_updated2,) = _get_struct_22dB15d().unpack(str[start:end])
      self.mpc_debug_msg.is_full_stop = bool(self.mpc_debug_msg.is_full_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19dB3d3I = None
def _get_struct_19dB3d3I():
    global _struct_19dB3d3I
    if _struct_19dB3d3I is None:
        _struct_19dB3d3I = struct.Struct("<19dB3d3I")
    return _struct_19dB3d3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_22dB15d = None
def _get_struct_22dB15d():
    global _struct_22dB15d
    if _struct_22dB15d is None:
        _struct_22dB15d = struct.Struct("<22dB15d")
    return _struct_22dB15d
_struct_17d3I = None
def _get_struct_17d3I():
    global _struct_17d3I
    if _struct_17d3I is None:
        _struct_17d3I = struct.Struct("<17d3I")
    return _struct_17d3I
_struct_d3I = None
def _get_struct_d3I():
    global _struct_d3I
    if _struct_d3I is None:
        _struct_d3I = struct.Struct("<d3I")
    return _struct_d3I
