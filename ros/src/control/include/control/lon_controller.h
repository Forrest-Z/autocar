#ifndef LON_CONTROLLER_H_
#define LON_CONTROLLER_H_
#include "control/pid_controller.h"
<<<<<<< HEAD
=======
#include "car_msgs/control_cmd.h"
>>>>>>> 4454cb39cf963602a0bcf1ce458724dfe5b25db3
#include "car_msgs/chassis.h"
#include "car_msgs/control.h"
#include "car_msgs/localization.h"
#include "car_msgs/trajectory.h"
#include "car_msgs/trajectory_point.h"

class LonControllerConf{
    public:
        LonControllerConf(){};
        virtual ~LonControllerConf(){};

        double ts;
        PidConf station_pid_conf;
        PidConf speed_pid_conf;
};

class LonController {
    public:
        LonController();
        void Init(const LonControllerConf *control_conf);

        /**
         * @brief compute brake / throttle values based on current vehicle status
         *        and target trajectory_path
         * @param localization vehicle location
         * @param chassis vehicle status e.g., speed, acceleration
         * @param trajectory_path trajectory_path generated by planning
         * @param cmd control command
         * @return Status computation status
         */
        void ComputeControlCommand(
            const car_msgs::localization *localization,
            const car_msgs::chassis *chassis,
            const car_msgs::trajectory *planning_published_trajectory,
            car_msgs::control_cmd *cmd);

        /**
         * @brief reset longitudinal controller
         * @return Status reset status
         */
        bool Reset();

        /**
         * @brief stop longitudinal controller
         */
        void Stop();

    protected:
        const std::string name_;
        double ts_;
        PIDController station_pid_controller_;
        PIDController speed_pid_controller_;
};

#endif  // LON_CONTROLLER_H_
