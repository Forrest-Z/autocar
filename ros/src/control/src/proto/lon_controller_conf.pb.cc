// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lon_controller_conf.proto

#include "lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_pid_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PidConf_pid_5fconf_2eproto;
namespace autocar {
namespace control {
class LonControllerConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LonControllerConf> _instance;
} _LonControllerConf_default_instance_;
}  // namespace control
}  // namespace autocar
static void InitDefaultsLonControllerConf_lon_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::autocar::control::_LonControllerConf_default_instance_;
    new (ptr) ::autocar::control::LonControllerConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::autocar::control::LonControllerConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLonControllerConf_lon_5fcontroller_5fconf_2eproto}, {
      &scc_info_PidConf_pid_5fconf_2eproto.base,}};

void InitDefaults_lon_5fcontroller_5fconf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_lon_5fcontroller_5fconf_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_lon_5fcontroller_5fconf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_lon_5fcontroller_5fconf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_lon_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::autocar::control::LonControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::autocar::control::LonControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::autocar::control::LonControllerConf, station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::autocar::control::LonControllerConf, speed_pid_conf_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::autocar::control::LonControllerConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::autocar::control::_LonControllerConf_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_lon_5fcontroller_5fconf_2eproto = {
  {}, AddDescriptors_lon_5fcontroller_5fconf_2eproto, "lon_controller_conf.proto", schemas,
  file_default_instances, TableStruct_lon_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_lon_5fcontroller_5fconf_2eproto, 1, file_level_enum_descriptors_lon_5fcontroller_5fconf_2eproto, file_level_service_descriptors_lon_5fcontroller_5fconf_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_lon_5fcontroller_5fconf_2eproto = {
  false, InitDefaults_lon_5fcontroller_5fconf_2eproto, 
  "\n\031lon_controller_conf.proto\022\017autocar.con"
  "trol\032\016pid_conf.proto\"y\n\021LonControllerCon"
  "f\0222\n\020station_pid_conf\030\001 \001(\0132\030.autocar.co"
  "ntrol.PidConf\0220\n\016speed_pid_conf\030\002 \001(\0132\030."
  "autocar.control.PidConf"
,
  "lon_controller_conf.proto", &assign_descriptors_table_lon_5fcontroller_5fconf_2eproto, 183,
};

void AddDescriptors_lon_5fcontroller_5fconf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_pid_5fconf_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_lon_5fcontroller_5fconf_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lon_5fcontroller_5fconf_2eproto = []() { AddDescriptors_lon_5fcontroller_5fconf_2eproto(); return true; }();
namespace autocar {
namespace control {

// ===================================================================

void LonControllerConf::InitAsDefaultInstance() {
  ::autocar::control::_LonControllerConf_default_instance_._instance.get_mutable()->station_pid_conf_ = const_cast< ::autocar::control::PidConf*>(
      ::autocar::control::PidConf::internal_default_instance());
  ::autocar::control::_LonControllerConf_default_instance_._instance.get_mutable()->speed_pid_conf_ = const_cast< ::autocar::control::PidConf*>(
      ::autocar::control::PidConf::internal_default_instance());
}
class LonControllerConf::HasBitSetters {
 public:
  static const ::autocar::control::PidConf& station_pid_conf(const LonControllerConf* msg);
  static void set_has_station_pid_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::autocar::control::PidConf& speed_pid_conf(const LonControllerConf* msg);
  static void set_has_speed_pid_conf(LonControllerConf* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::autocar::control::PidConf&
LonControllerConf::HasBitSetters::station_pid_conf(const LonControllerConf* msg) {
  return *msg->station_pid_conf_;
}
const ::autocar::control::PidConf&
LonControllerConf::HasBitSetters::speed_pid_conf(const LonControllerConf* msg) {
  return *msg->speed_pid_conf_;
}
void LonControllerConf::clear_station_pid_conf() {
  if (station_pid_conf_ != NULL) station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LonControllerConf::clear_speed_pid_conf() {
  if (speed_pid_conf_ != NULL) speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LonControllerConf::kStationPidConfFieldNumber;
const int LonControllerConf::kSpeedPidConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LonControllerConf::LonControllerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autocar.control.LonControllerConf)
}
LonControllerConf::LonControllerConf(const LonControllerConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_station_pid_conf()) {
    station_pid_conf_ = new ::autocar::control::PidConf(*from.station_pid_conf_);
  } else {
    station_pid_conf_ = NULL;
  }
  if (from.has_speed_pid_conf()) {
    speed_pid_conf_ = new ::autocar::control::PidConf(*from.speed_pid_conf_);
  } else {
    speed_pid_conf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:autocar.control.LonControllerConf)
}

void LonControllerConf::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto.base);
  ::memset(&station_pid_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_pid_conf_) -
      reinterpret_cast<char*>(&station_pid_conf_)) + sizeof(speed_pid_conf_));
}

LonControllerConf::~LonControllerConf() {
  // @@protoc_insertion_point(destructor:autocar.control.LonControllerConf)
  SharedDtor();
}

void LonControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete station_pid_conf_;
  if (this != internal_default_instance()) delete speed_pid_conf_;
}

void LonControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LonControllerConf& LonControllerConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LonControllerConf_lon_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:autocar.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_pid_conf_ != NULL);
      station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_pid_conf_ != NULL);
      speed_pid_conf_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LonControllerConf::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LonControllerConf*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .autocar.control.PidConf station_pid_conf = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::autocar::control::PidConf::_InternalParse;
        object = msg->mutable_station_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .autocar.control.PidConf speed_pid_conf = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::autocar::control::PidConf::_InternalParse;
        object = msg->mutable_speed_pid_conf();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LonControllerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autocar.control.LonControllerConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .autocar.control.PidConf station_pid_conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_station_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .autocar.control.PidConf speed_pid_conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_pid_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autocar.control.LonControllerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autocar.control.LonControllerConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LonControllerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autocar.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autocar.control.PidConf station_pid_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::station_pid_conf(this), output);
  }

  // optional .autocar.control.PidConf speed_pid_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::speed_pid_conf(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autocar.control.LonControllerConf)
}

::google::protobuf::uint8* LonControllerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autocar.control.LonControllerConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autocar.control.PidConf station_pid_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::station_pid_conf(this), deterministic, target);
  }

  // optional .autocar.control.PidConf speed_pid_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::speed_pid_conf(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autocar.control.LonControllerConf)
  return target;
}

size_t LonControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autocar.control.LonControllerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autocar.control.PidConf station_pid_conf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *station_pid_conf_);
    }

    // optional .autocar.control.PidConf speed_pid_conf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speed_pid_conf_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LonControllerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autocar.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LonControllerConf* source =
      ::google::protobuf::DynamicCastToGenerated<LonControllerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autocar.control.LonControllerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autocar.control.LonControllerConf)
    MergeFrom(*source);
  }
}

void LonControllerConf::MergeFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autocar.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_station_pid_conf()->::autocar::control::PidConf::MergeFrom(from.station_pid_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed_pid_conf()->::autocar::control::PidConf::MergeFrom(from.speed_pid_conf());
    }
  }
}

void LonControllerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autocar.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonControllerConf::CopyFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autocar.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonControllerConf::IsInitialized() const {
  return true;
}

void LonControllerConf::Swap(LonControllerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LonControllerConf::InternalSwap(LonControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(station_pid_conf_, other->station_pid_conf_);
  swap(speed_pid_conf_, other->speed_pid_conf_);
}

::google::protobuf::Metadata LonControllerConf::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_lon_5fcontroller_5fconf_2eproto);
  return ::file_level_metadata_lon_5fcontroller_5fconf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace autocar
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::autocar::control::LonControllerConf* Arena::CreateMaybeMessage< ::autocar::control::LonControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::autocar::control::LonControllerConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
